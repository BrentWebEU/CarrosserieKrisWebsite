// Responsive utilities and performance helpers
import { useEffect, useState } from 'react';\n\n// Hook for responsive breakpoints\nexport const useBreakpoint = () => {\n  const [breakpoint, setBreakpoint] = useState('desktop');\n  \n  useEffect(() => {\n    const handleResize = () => {\n      const width = window.innerWidth;\n      if (width < 480) {\n        setBreakpoint('mobile');\n      } else if (width < 768) {\n        setBreakpoint('tablet-sm');\n      } else if (width < 992) {\n        setBreakpoint('tablet');\n      } else if (width < 1200) {\n        setBreakpoint('desktop-sm');\n      } else {\n        setBreakpoint('desktop');\n      }\n    };\n    \n    handleResize();\n    window.addEventListener('resize', handleResize);\n    \n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  return breakpoint;\n};\n\n// Hook for intersection observer (lazy loading, animations)\nexport const useIntersectionObserver = (options = {}) => {\n  const [ref, setRef] = useState(null);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  \n  useEffect(() => {\n    if (!ref) return;\n    \n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsIntersecting(entry.isIntersecting);\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '50px',\n        ...options\n      }\n    );\n    \n    observer.observe(ref);\n    \n    return () => {\n      if (ref) {\n        observer.unobserve(ref);\n      }\n    };\n  }, [ref, options]);\n  \n  return [setRef, isIntersecting];\n};\n\n// Debounce utility for performance\nexport const useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  \n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    \n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  \n  return debouncedValue;\n};\n\n// Smooth scroll utility\nexport const scrollToElement = (elementId, offset = 100) => {\n  const element = document.getElementById(elementId);\n  if (element) {\n    const elementPosition = element.offsetTop - offset;\n    window.scrollTo({\n      top: elementPosition,\n      behavior: 'smooth'\n    });\n  }\n};\n\n// Image lazy loading component\nexport const LazyImage = ({ src, alt, className, ...props }) => {\n  const [imageRef, isVisible] = useIntersectionObserver();\n  const [loaded, setLoaded] = useState(false);\n  \n  return (\n    <div ref={imageRef} className={`lazy-image-container ${className || ''}`}>\n      {isVisible && (\n        <img\n          src={src}\n          alt={alt}\n          onLoad={() => setLoaded(true)}\n          className={`lazy-image ${loaded ? 'loaded' : 'loading'}`}\n          {...props}\n        />\n      )}\n    </div>\n  );\n};\n